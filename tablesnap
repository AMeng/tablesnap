#!/usr/bin/env python
import pyinotify
import boto

from traceback import format_exc
from threading import Thread
import os.path
import socket
import json
import sys
import os

s3 = boto.connect_s3()
bucket = s3.get_bucket('com.simplegeo.sstables')
hostname = socket.getfqdn()

def upload_sstable(keyname, filename):
    print 'Uploading', filename

    def progress(sent, total):
        if sent == total:
            print 'Finished uploading', filename

    try:
        dirname = os.path.dirname(filename)
        key = bucket.new_key('%s-listdir.json' % keyname)
        key.set_contents_from_string(json.dumps({dirname: os.listdir(dirname)}))

        key = bucket.new_key(keyname)
        key.set_contents_from_filename(filename, replace=False, cb=progress)
    except:
        print 'Error uploading', keyname
        print format_exc()


def handler(event):
    mask = event.mask - (event.mask & pyinotify.IN_ISDIR)
    maskname = pyinotify.EventsCodes.ALL_VALUES[event.mask]
    if event.pathname.endswith('-Data.db'):
        #print maskname, event.pathname
        keyname = '%s:%s' % (hostname, event.pathname)
        key = bucket.get_key(keyname)
        if key is None:
            t = Thread(target=upload_sstable, args=(keyname, event.pathname))
            t.setDaemon(True)
            t.start()


def main():
    if len(sys.argv) < 2:
        sys.stderr.write('Usage: %s <path> [...]\n' % sys.argv[0])
        return -1

    wm = pyinotify.WatchManager()
    notifier = pyinotify.Notifier(wm, handler)
    for path in sys.argv[1:]:
        wm.add_watch(path, pyinotify.IN_MOVED_TO)
    notifier.loop()

if __name__ == '__main__':
    sys.exit(main())
